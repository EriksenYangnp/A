
step3 Configuration.java
  @ConfigurationProperties("name from application.properties")
  public class Configuration{
    private int min;
    private int max
    getters/ setters
  }
  @Autowired to controller 

step4 spring cloud config server
    1. pom
    2.properties: spring.application.name=spring-cloud-config-server / server.port=

step6 GIT
  add git link to eclipse folder: build path--link source



https://github.com/in28minutes/spring-microservices/blob/master/03.microservices/step03.md
  pplication.properties: ( limits-service.maximum=999)
  create Configuration.java to get infor from application.properties 
      ( @ConfigurationProperties("limits-service") / private int maximum / setters & getters)
  @Autowired configuration at Controller    
  

step7 connect local git repository to spring cloud config server
  1.creat limits-service.properties.  
  2.config is in application.properties(spring.cloud.config.server.git.url=file:/// uri...)
  3. @EnableConfigServer in Application

Step9 change every application.properties to connect central config file 
  change limits-service's application.pro to bootstrap.pro 
      ( spring.application.name=limits-srvice match with git-localconfig-repo's properties 
        spring.cloud.config.uri=http:// spring-cloud-config-service's port)
                                                            
   
Git: c/Users/Public/git-localconfig-repo

step17
   data.sql ( inset into exchange_calue(id,...) values(100,...);
   pom()  	<dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>
            <dependency>
              <groupId>com.h2database</groupId>
              <artifactId>h2</artifactId>
           </dependency>
   ExchangeValue.java (@Entity  @Id @Column)
   application.properties: spring.jpa.show-sql=true
                            spring.h2.console.enabled=true
   brower: jdbc:h2:mem:testdb

Step 20
  RestTemplate.getForEntity( uri, XXX.class(return), pass_value(HashMap))
  
Step 21 Feign -- rest service client
  1.add dependency in pom
  2.add @EnableFeignClient at application class
  3.create proxy: interface  @FeignClient(name, url) @GetMapping to call other service

step 22 Ribbon - load balance
  1.pom file
  2.at proxy interface @ EnableRibbon(name)
  3.url update at application properties


step25 set up Eureka server
 1.pom netflix-eureka-server
 2.application.java: ï¼ EnableEurekaServer
 3.properties
 
step26 Eureka client
  1.pom: netflix-eureka-cliet
  2.Application: @EnableDiscoveryClient
  3.propeties:eureka.client.service-url.defaultzone=http://
 
 step 29 review
 step 30 API gateway
    1.application.java: @EnableZuulProxy @EnableDiscoveryClient
    2.property
    3.ZuulLoggingFilter.java extend ZuulFilter: 
    4.http://localhost8761/{application-name}/{url}
    
step33 34 ?

step36
  sleuth: set id to each request
  1.pom: spring-cloud-starter-sleuth
  2.application: @Bean
                 public Sampler defaultSampler(){ retrun Sampler.ALWAYS_SAMPLE}
  3.controller: add log to show id



step104 zipkin 
  cmd --SET RABBIT_URI=amqp://localhost
      -- java -jar zipkin-server-2.19.3-exec.jar
  localhose:9411/zipkin
    
  
  RabbitMQ window--services--
  
  
  
  





