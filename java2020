OOP
  Inheritance:
  Encapsulation: getters/setters
  Abstraction: class
  polymophesion: 继承，重写，父类引用指向子类对象
  
  access modifier
  private:class
  defualt: private + same package
  protected: defualt + sub_class in defferent package
  public:
  
  final variable: constant
  final method: no override
  final class: no inheritance
  
  static:
  

  Abstrac : extend 1 ab, free, (are designed to be extended and cannot be instantiated)
  Interface: implement 多 interface, public static final variable,(promote polymorphism by describing a form that an object can take)
  
  
  java.lang.obj
  clone()/equals()/hashCode/toString/getClass/wait/notify/nofifyAll
  
  Exceptions: Throwable--error: statckoverflowErrors
                         exception--checked exception:try/catch/finally, throws(IOExcetion)
                                  --unchecked exception(runtimeExcetion) NullpointException
  
  String
  StringBuffer是线程安全的, slow, 多线程场景下操作大量字符串数据的时候
  StringBuilder不是线程安全的, fast,单线程场景下操作大量字符串数据的时候
  
  
  Collection
   == & .equals()
     == address comparison
    .equals() content comparison
    
  hashcode()&equals()
    if not overide hashcode, 默认的hashcode方法是根据对象的内存地址经哈希算法得来的，显然此时s1!=s2,故两者的hashcode不一定相等.
    然而重写了equals，且s1.equals(s2)返回true，根据hashcode的规则，两个对象相等其哈希值一定相等，所以矛盾就产生了
  
  Set: not duplicate elements
  List: ordered, can duplicate
  Map:key(not duplicate)/value
  

  Enums:a set of single-instance constants
  Array:an object that can hold a fixed number of values of a single type, obj+primitive
  ArrayList: dynamic, obj,
  
  HashTable: not null key&values, synch, Enumeration its keys
  HashMap:hash function-put, uses hashCode and equals methods -get. If the key exists, updated with the new value
               null key&values, no-synch, Iterate over set key
  
  HashSet: hash table, not sort,  add/remove O(1) 
  TreeSet: tree, sort, add/remove O(logn)
  
  Comparable-comparetTO
  Comparator-compare/equals
  
  Priority Queue:based on a priority heap, no null,
  Blockin Queue: if BlockQueue 空,从BlockingQueue取东西 被阻断进入等待状态,直到BlockingQueue进了东西才会被唤醒.(PriorityBlockingQueue)
  
  
  Thread 
    1.extend Thread, override run()
    2.implement Runnable, implement run()
    new start run block dead
    wait and sleep
      wait() : releases the lock or monitor .thread goes in waiting state and it won’t come back automatically until we call the notify() or notifyAll()
      sleep(): not  releases the lock or monitor . pause the process for few seconds
    Thread Safe:  program safe to use in multithreaded environment(Synchronization is the easiest and most widely used tool for thread safety in java.)
    
    ExecutorService:manages a thread pool that accepts Runnable or Callable tasks
  
  
  java动态绑定静态绑定
    静态绑定:compile time (final，static，private和构造方法是前期绑定),overloaded methods)使用的是静态绑定
    动态绑定:run time(),overridden methods)使用的是动态绑定
  
  Memory mangagement
    https://www.jianshu.com/p/f4bc828cb38e
    
    Stack: local variable+operad+return address+Reference to runtime constant pool.
    Heap: in a dynamically sized area of memory
    GC:System.gc()
    Strong References:object will remain on the heap
    Soft References: not be eagerly garbage collected, making them ideal for caches
    Memory Leaks
    Reference Queue
  
  JDBC
    Connection -DataSource:JNDI 
               -DriverManager: url&credentials
    Statement : provided by a Connection to encapsulate SQL queries
                PreparedStatements are pre-compiled by DB and improve performance
    ResultSets : provided by Statements to encapsulate the result of a quer  
  
  Sql 5 type statement
       Data definition language (DDL), 
       Data manipulation language (DML), 
       Data Control Language (DCL), 
       Transaction Control Statement (TCS), 
       Session Control Statements (SCS).
       
  Primary key :  uniquely identifies each tuple (row) in that table
  Unique key constraints also identifies an individual tuple uniquely in a relation or table
        Primary key will not accept NULL values whereas Unique key can accept one NULL value.
        only primary key whereas there can be multiple unique key on a table.
        A Clustered index automatically created when a primary key is defined whereas Unique key generates the non-clustered index.

 
  JDBC:
    // JDBC driver name and database URL
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost:3306/blog?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC";
     //  Database credentials
    static final String USER = "yourusername";
    static final String PASS = "yourpassword";
    
    connection = DriverManager.getConnection(DB_URL, USER, PASS);
    statement = connection.createStatement();
    String sql = "select * from role";
     ResultSet rs = statement.executeQuery(sql);
  
  Hibernate: 5.2.x
    https://www.jianshu.com/p/c59e974e2a70
    https://www.javatpoint.com/steps-to-create-first-hibernate-application
    1. Create the Persistent class: pojo
    2. mapping file: XXX.hbm.xml hibernate-mapping/ class name/ id/ generator / property
          hibernate-mapping : It is the root element in the mapping file that contains all the mapping elements.
          class : It is the sub-element of the hibernate-mapping element. It specifies the Persistent class.
          id : It is the subelement of class. It specifies the primary key attribute in the class.
          generator : It is the sub-element of id. It is used to generate the primary key. There are many generator classes such as assigned, increment, hilo, sequence, native etc. We will learn all the generator classes later.
          property : It is the sub-element of class that specifies the property name of the Persistent class.
    3. Configuration file
         <session-factory>  
            <property name="hbm2ddl.auto">update</property>  
            <property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>  
            <property name="connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>  
            <property name="connection.username">system</property>  
            <property name="connection.password">jtp</property>  
            <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>  
            <mapping resource="employee.hbm.xml"/>  
        </session-factory>  
       
      4.Create the class that retrieves or stores the object
          //Create typesafe ServiceRegistry object    
           StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();  
           Metadata meta = new MetadataSources(ssr).getMetadataBuilder().build();  
          SessionFactory factory = meta.getSessionFactoryBuilder().build();  
          Session session = factory.openSession();  
          Transaction t = session.beginTransaction();   
          
    5. Load the jar file       
    
    https://www.jianshu.com/p/c59e974e2a70
      configuration：负责配置并启动 hibernate，创建 SessionFactory
      sessionFactory：负责初始化 hibernate，创建 session 对象
      session：负责被持久化对象 CRUD 操作
      Transaction：负责事物相关的操作
      
     Session的缓存
     SessionFactory的缓存: default close (很少被修改的数据；不是很重要的数据，允许偶尔出现并发；不会被并发访问的数据；常量数据)
     
     Search: Session, SessionFactory, DB, 
     lazy load:
        get(): Session, SessionFactory, DB, not found: return null
        load(): false: 同get()
                true: Session( proxy ), SessionFactory, DB, not found: return ObjectNotFoundException
      
      
      
      hibernate 
      save:
          The save method triggers a SaveOrUpdateEvent which is handled by the DefaultSaveOrUpdateEventListener Hibernate event listener. 
          Therefore, the save method is equivalent to the update and saveOrUpdate methods.
      persist:
          The persist method triggers a PersistEvent which is handled by the DefaultPersistEventList  
       
       
       
       
             
  AWS - Years


Dockers – Years

Kubernates – Years
  https://www.kubernetes.org.cn/k8s
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
