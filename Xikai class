Charpter0
  shell :echo, ls, ./, cat, grep 'di',
    https://www.jianshu.com/p/27d426ad6400
    https://www.runoob.com/linux/linux-shell-variable.html

Charpter1
  JDK = JRE(JRE = JVM + java) + Javac  
  JVM -> bytecode run on JVM, JVM written in C
  source code -> .java 
  bytecode -> .class

Charpter2
  OOP (Encapsulation & Inheritance & Polymorphism)
  Polymorphism: Parent reference refer to Child's Object or interface reference refer to its implementation instance
    1.要有继承关系
    2.子类要重写父类的方法
    3.父类引用指向子类对
    https://www.jianshu.com/p/ebf2cd2347ff
  
  abstract vs interface
    https://www.journaldev.com/1607/difference-between-abstract-class-and-interface-in-java
  abstract : provide a default implementation which are common for all the subclasses(base contract keeps on changing)
    1. abstract, extend 1 ab class
    
    2 ab and no ab method
    3 final, no-final, static,  no-static value
  
  interface :Interfaces are a good choice for providing the base for class hierarchy and contract　
    1.interface implement 多 interface
    
    2.ab methods (java8 default & static methods)
    3. only static final variable
     
Charpter3
  class loader:  BYTECODE (.class)load to JVM
  https://www.journaldev.com/349/java-classloader
    Bootstrap class load: jdk internal classes
    Extersions class load: jdk external classes $JAVA_HOME
    System class load: It loads classes from the current classpath
    1.loadClass()- findLoadedClass()<check loaded or not>--findClass()
   
   == & .equals()
    == address comparison
    .equals() content comparison
   
   StringBuffer and StringBuilder
    StringBuffer is thread safe and synchronized
    StringBuilder is not thread safe and not synchronized--but fast
   
   Thread Safe:  program safe to use in multithreaded environment(Synchronization is the easiest and most widely used tool for thread safety in java.)
    implement Runnable interface : implement run() method, call start() <provides more functionality>
    extend Thread :  override run(), call start()
   
    ThreadPoolExecutor() : ExecutorService 
    * https://www.journaldev.com/1162/java-multithreading-concurrency-interview-questions-answers
      Thread is a single task of execution within the process.
    wait and sleep
      wait() : releases the lock or monitor .thread goes in waiting state and it won’t come back automatically until we call the notify() or notifyAll()
      sleep(): not  releases the lock or monitor . pause the process for few seconds

Charpter4 colletion
  Array: fixed size, primiter&obj
  ArrayList: dynamic size, obj, 
   ArrayList: search fast, delete/insert slow,
   linkedList: search slow, delete/insert fast,
  
  hashset: set interface, hashing,fast, unique value, allows null,  add(),                      , equal()
  treeset:                ordered, slow,                               no null, n(logn)- search, compareTo()
  
  hashtable:synchronized,slow, no null key or value, 
  hashmap:non synchronized, fast, 1 null key and multiple null values, HashMap as synchronized by calling this code Map m = Collections.synchronizedMap(hashMap);

  ITERATOR: hasNext(), next(), remove()
  ENUMERATION: hasMoreElement(), nextElement()
  
  equals() hashCode()
  https://www.journaldev.com/21095/java-equals-hashcode
  
  Map:keys can't be duplicate, values can.

Charpter5
  Generic
    https://www.jianshu.com/p/986f732ed2f1
    https://www.jianshu.com/p/448742e97944
    public <T> T method(){T t}
  
  Reflection
    https://www.journaldev.com/1789/java-reflection-example-tutorial

Charpter6 
  Exception
    which level will handle exception :
    throwable-- error(worry, program failed)
           -- exception -- checked(anticipated)--try catch
                                    --throws
                        -- runtimeException(unexpected)
    
  inner class
  
  I/O
    https://www.jianshu.com/p/48f2fb0b79b5?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation
  
  
  Serializable
    Transfer an object to byte stream and recover the object later is called serialization and deserialization
    static fields and methods won't be serializable
    
Charpter7
  Process:a program under execution 
  Thread :Lightweight process that can be managed independently by a scheduler
    https://www.jianshu.com/p/ea58227d10c9
    
  Runnable:start(),Running:run(), Block, 
  Sleep(): thread method, keep Monitor(lock), until time auto live
  Wait():  obj    method, release Monitor(lock), wait notify/notifyall go back to  thread pool
  Notify(): notify  1 wait thread
  NotifyAll(); notify all wait thread
  
  Thread pool: https://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice
  



