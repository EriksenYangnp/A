Charpter0
  shell :echo, ls, ./, cat, grep 'di',
    https://www.jianshu.com/p/27d426ad6400
    https://www.runoob.com/linux/linux-shell-variable.html

Charpter1
  JDK = JRE(JRE = JVM + java) + Javac  
  JVM -> bytecode run on JVM, JVM written in C
  source code -> .java 
  bytecode -> .class

Charpter2
  OOP (Encapsulation & Inheritance & Polymorphism)
  Polymorphism: Parent reference refer to Child's Object or interface reference refer to its implementation instance
    1.要有继承关系
    2.子类要重写父类的方法
    3.父类引用指向子类对
    https://www.jianshu.com/p/ebf2cd2347ff
  
  abstract vs interface
    https://www.journaldev.com/1607/difference-between-abstract-class-and-interface-in-java
  abstract : provide a default implementation which are common for all the subclasses(base contract keeps on changing)
    1. abstract, extend 1 ab class
    
    2 ab and no ab method
    3 final, no-final, static,  no-static value
  
  interface :Interfaces are a good choice for providing the base for class hierarchy and contract　
    1.interface implement 多 interface
    
    2.ab methods (java8 default & static methods)
    3. only static final variable
     
Charpter3
  class loader:  BYTECODE (.class)load to JVM
  https://www.journaldev.com/349/java-classloader
    Bootstrap class load: jdk internal classes
    Extersions class load: jdk external classes $JAVA_HOME
    System class load: It loads classes from the current classpath
    1.loadClass()- findLoadedClass()<check loaded or not>--findClass()
   
   == & .equals()
    == address comparison
    .equals() content comparison
   
   StringBuffer and StringBuilder
    StringBuffer is thread safe and synchronized
    StringBuilder is not thread safe and not synchronized--but fast
   
   Thread Safe:  program safe to use in multithreaded environment(Synchronization is the easiest and most widely used tool for thread safety in java.)
    implement Runnable interface : implement run() method, call start() <provides more functionality>
    extend Thread :  override run(), call start()
   
    ThreadPoolExecutor() : ExecutorService 
    * https://www.journaldev.com/1162/java-multithreading-concurrency-interview-questions-answers
      Thread is a single task of execution within the process.
    wait and sleep
      wait() : releases the lock or monitor .thread goes in waiting state and it won’t come back automatically until we call the notify() or notifyAll()
      sleep(): not  releases the lock or monitor . pause the process for few seconds

Charpter4 colletion
  Array: fixed size, primiter&obj
  ArrayList: dynamic size, obj, 
   ArrayList: search fast, delete/insert slow,
   linkedList: search slow, delete/insert fast,
  
  hashset: set interface, hashing,fast, unique value, allows null,  add(),                      , equal()
  treeset:                ordered, slow,                               no null, n(logn)- search, compareTo()
  
  hashtable:synchronized,slow, no null key or value, 
  hashmap:non synchronized, fast, 1 null key and multiple null values, HashMap as synchronized by calling this code Map m = Collections.synchronizedMap(hashMap);

  ITERATOR: hasNext(), next(), remove()
  ENUMERATION: hasMoreElement(), nextElement()
  
  equals() hashCode()
  https://www.journaldev.com/21095/java-equals-hashcode
  
  Map:keys can't be duplicate, values can.

Charpter5
  Generic
    https://www.jianshu.com/p/986f732ed2f1
    https://www.jianshu.com/p/448742e97944
    public <T> T method(){T t}
  
  Reflection
    https://www.journaldev.com/1789/java-reflection-example-tutorial

Charpter6 
  Exception
    which level will handle exception :
    throwable-- error(worry, program failed)
           -- exception -- checked(anticipated)--try catch
                                    --throws
                        -- runtimeException(unexpected)
    
  inner class
  
  I/O
    https://www.jianshu.com/p/48f2fb0b79b5?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation
  
  
  Serializable
    Transfer an object to byte stream and recover the object later is called serialization and deserialization
    static fields and methods won't be serializable
    
Charpter7
  Process:a program under execution 
  Thread :Lightweight process that can be managed independently by a scheduler
    https://www.jianshu.com/p/ea58227d10c9
    
  Runnable:start(),Running:run(), Block, 
  Sleep(): thread method, keep Monitor(lock), until time auto live
  Wait():  obj    method, release Monitor(lock), wait notify/notifyall go back to  thread pool
  Notify(): notify  1 wait thread
  NotifyAll(); notify all wait thread
  
  Thread pool: https://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice
    java.util.concurrent.Executor : ExecutorService
  
  Clone :  https://www.jianshu.com/p/94dbef2de298
  shallow copy: primite type copy, reference type only copy address ( implement Cloneable 接口，并覆写 clone())
  Deep copy: primite type copy, reference type copy obj( implement Cloneable 接口，并覆写 clone(), then ref type call clone)
  
  
Charpter8
    JVM: executing the java program line by line 
    ClassLoader: https://www.jianshu.com/p/1f5baa2947d2
        BootStrap ClassLoader
        Extension ClassLoader
        Appclass Loader
    Loading: find .class and load into memory 
    Linking:
    Initializing:
  
    Design Pattern 
      Singleton:
  
   JDBC:
    // JDBC driver name and database URL
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost:3306/blog?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC";
     //  Database credentials
    static final String USER = "yourusername";
    static final String PASS = "yourpassword";
    
    connection = DriverManager.getConnection(DB_URL, USER, PASS);
    statement = connection.createStatement();
    String sql = "select * from role";
     ResultSet rs = statement.executeQuery(sql);
  
  Hibernate: 5.2.x
    https://www.jianshu.com/p/c59e974e2a70
    https://www.javatpoint.com/steps-to-create-first-hibernate-application
    1. Create the Persistent class: pojo
    2. mapping file: XXX.hbm.xml hibernate-mapping/ class name/ id/ generator / property
          hibernate-mapping : It is the root element in the mapping file that contains all the mapping elements.
          class : It is the sub-element of the hibernate-mapping element. It specifies the Persistent class.
          id : It is the subelement of class. It specifies the primary key attribute in the class.
          generator : It is the sub-element of id. It is used to generate the primary key. There are many generator classes such as assigned, increment, hilo, sequence, native etc. We will learn all the generator classes later.
          property : It is the sub-element of class that specifies the property name of the Persistent class.
    3. Configuration file
         <session-factory>  
            <property name="hbm2ddl.auto">update</property>  
            <property name="dialect">org.hibernate.dialect.Oracle9Dialect</property>  
            <property name="connection.url">jdbc:oracle:thin:@localhost:1521:xe</property>  
            <property name="connection.username">system</property>  
            <property name="connection.password">jtp</property>  
            <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>  
            <mapping resource="employee.hbm.xml"/>  
        </session-factory>  
    4.Create the class that retrieves or stores the object
          //Create typesafe ServiceRegistry object    
           StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();  
           Metadata meta = new MetadataSources(ssr).getMetadataBuilder().build();  
          SessionFactory factory = meta.getSessionFactoryBuilder().build();  
          Session session = factory.openSession();  
          Transaction t = session.beginTransaction();   
          
    5. Load the jar file       
    
    https://www.jianshu.com/p/c59e974e2a70
      configuration：负责配置并启动 hibernate，创建 SessionFactory
      sessionFactory：负责初始化 hibernate，创建 session 对象
      session：负责被持久化对象 CRUD 操作
      Transaction：负责事物相关的操作
      
     Session的缓存
     SessionFactory的缓存: default close (很少被修改的数据；不是很重要的数据，允许偶尔出现并发；不会被并发访问的数据；常量数据)
     
     Search: Session, SessionFactory, DB, 
     lazy load:
        get(): Session, SessionFactory, DB, not found: return null
        load(): false: 同get()
                true: Session( proxy ), SessionFactory, DB, not found: return ObjectNotFoundException
      
      
      
      
      
      
      
      
          
          
