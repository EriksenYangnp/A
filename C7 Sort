Shell sort

knuth 3*h+1

public void shellSort(){
  int inner, outer;
  long temp;
  
  int h = 1;
  while(h <= nElems/3)
    h = h*3 +1;  // set knuth 间隔 (1, 4, 13,40...)
  
  while(h>0){ //decreasing h, nutil h=1
    
    for(outer=h; outer<nElems; outer++){
      temp = theArray[outer]; // temp=a[4] 
      inner = outer;          //4
    
      while(inner > h-1 && theArray[inner-h] >= temp) //inner>1 && a[0] >= temp --要交换
      {
        theArray[inner] = theArray[inner-h];　// swith a[0]put to a[4]
        inner -= h;                           // inner = 0
      }
      theArray[inner] = temp;                //temp/a[4] put ot a[0]
    }//end for
    h = (h-1) / 3;
  }//end while(h>0)
  
}

Partion

while(theArray[++leftPtr] < pivot)// left loop find > pivot will stop

while(theArray[--rightPtr] > pivot) //right loop find < pivot will stop

swap(leftPtr, rightPtr) //swap 


Quick Sort
1. divide to left and right
2. rec left
3. rec right

public void recQuickSor(int lift,  int right){
  if(right -left <= 0 )
    return;
  else{
    long pivot = theArray[right]; //rightmost item as pivot
  
    int partition = partionIt(left, right);
    recQuickSort(left, partition-1);
    recQuickSort(partion+1, right);
  } 
  public int partionIt(int left, int right, long pivot){
    int liftPtr = left-1;
    int rightPtr = right;
    while(true){
      while(theArray[++leftPtr] < pivot)// left loop find > pivot will stop

      while(theArray[--rightPtr] > pivot) //right loop find < pivot will stop

      swap(leftPtr, rightPtr) //swap 
     return leftPtr;
    }  
  }
}
//medianOf3
if(theArray[left] > theArray[right]) //order left & right
  swap(left,right);
if(theArray[center] > theArray[right])//order center & right
  swap(center,right);
  
swap(center,right-1); //put pivot on right
retrun theArray[right-1];


